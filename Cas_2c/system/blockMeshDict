/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Paramètres
    L 1;               // Largeur de la plaque
    H 0.3;                // Distance injection/plaque
    Hi 0.01;                // Longueur d'injection
    D 0.01;			           // Diametre de l'injection
    tan_theta 0;             // Angle d'injection
    dx 0.001;             // Taille d'une maille
    n_block 3;          // Nombre de block droit ou gauche

    Ltot #eval {$H + $Hi};
    Lmg #eval {($L / 2) - ($D / 2)};
    Lmd #eval {($L / 2) + ($D / 2)};

    nbm_yi #eval {$Hi / $dx};
    nbm_yb #eval {$H / $dx};
    nbm_xi #eval {$D / $dx};
    nbm_xb #eval {(($L - $D) / (2 * $n_block)) / $dx};

    nbm_x1 #eval {$nbm_xb/8};
    nbm_x2 #eval {$nbm_xb/4};
    nbm_x3 #eval {$nbm_xb/2};

    nbm_y1 #eval {$nbm_yb/8};
    nbm_y2 #eval {$nbm_yb/4};
    nbm_y3 #eval {$nbm_yb/2};

scale   1;

vertices #codeStream
{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{
        // Déclaration de variable
        // int n_block = 3;
        // int Lmg = 1;
        // Deux blocks milieu
        pointField points(8)
        points[0] = ($Lmg $H 0);
        points[1] = ($Lmd $H 0);
        points[2] = ($Lmd $Ltot 0);
        points[3] = ($Lmg $Ltot 0);
        points[4] = ($Lmg 0 0);
        points[5] = ($Lmd 0 0);
        points[6] = ($Lmd $H 0);
        points[7] = ($Lmg $H 0);
        /*

        points[8] = (0 0 0);
        points[9] = ($Lmg $H 0);
        points[10] = ($Lmg $H 0);
        points[11] = ($Lmd $H 0);
        points[12] = ($Lmd $Ltot 0);
        points[13] = ($Lmg $Ltot 0);
        points[14] = ($Lmg 0 0);
        points[15] = ($Lmd 0 0);
        points[16] = ($Lmd $H 0);
        points[17] = ($Lmg $H 0);
        points[18] = ($Lmg $H 0);
        points[19] = ($Lmg $H 0);
        points[20] = ($Lmg $H 0);
        points[21] = ($Lmd $H 0);
        points[22] = ($Lmd $Ltot 0);
        points[23] = ($Lmg $Ltot 0);
        points[24] = ($Lmg 0 0);
        points[25] = ($Lmd 0 0);
        points[26] = ($Lmd $H 0);
        points[27] = ($Lmg $H 0);
        points[28] = ($Lmg $H 0);
        points[29] = ($Lmg $H 0);
        points[30] = ($Lmg $H 0);
        points[31] = ($Lmg $H 0);

// N blocks de gauche (Ceux qui votent Melanchon)
label nb_p = points.size(); // Défini nbpg comme le nb de pts déjà def (ici 8 cf l.53)
points.setSize(4*$n_block + nb_p); // Redefini le nb de point max

label cpt = 0;
for (label i = nb_p; i < (4*$n_block + nb_p) - 4 ; i = i + 4)
{
    points[i] = point(($Lmg / n_block) * cpt, ($Lmg / n_block) * cpt * $tan_theta, 0);
    cpt = cpt + 1;
}

cpt = 1;
for (label i = nb_p+1; i < (4*$n_block + nb_p) - 3 ; i = i + 4)
{
    points[i] = point(($Lmg / n_block) * cpt, ($Lmg / n_block) * cpt * $tan_theta, 0);
    cpt = cpt + 1;
}

cpt = 1;
for (label i = nb_p+2; i < (4*$n_block + nb_p) - 2 ; i = i + 4)
{
    points[i] = point(($Lmg / n_block) * cpt, $H, 0);
    cpt = cpt + 1;
}

cpt = 0;
for (label i = nb_p+3; i < (4*$n_block + nb_p) - 1 ; i = i + 4)
{
    points[i] = point(($Lmg / n_block) * cpt, $H, 0);
    cpt = cpt + 1;
}

// N blocks de droite (Ceux qui votent Zemmour)
nb_p = points.size(); // Défini nbpg comme le nb de pts déjà def
points.setSize(4*$n_block + nb_p); // Redefini le nb de point max

cpt = 0;
for (label i = nb_p; i < (4*$n_block + nb_p) - 4 ; i = i + 4)
{
    points[i] = point($Lmd + (($L-$Lmd) / n_block) * cpt, ($Lmd + (($L-$Lmd) / n_block) * cpt) * $tan_theta, 0);
    cpt = cpt + 1;
}

cpt = 1;
for (label i = nb_p+1; i < (4*$n_block + nb_p) - 3 ; i = i + 4)
{
    points[i] = point($Lmd + (($L-$Lmd) / n_block) * cpt, ($Lmd + (($L-$Lmd) / n_block) * cpt) * $tan_theta, 0);
    cpt = cpt + 1;
}

cpt = 1;
for (label i = nb_p+2; i < (4*$n_block + nb_p) - 2 ; i = i + 4)
{
    points[i] = point($Lmd + (($L-$Lmd) / n_block) * cpt, $H, 0);
    cpt = cpt + 1;
}

cpt = 0;
for (label i = nb_p+3; i < (4*$n_block + nb_p) - 1 ; i = i + 4)
{
    points[i] = point($Lmd + (($L-$Lmd) / n_block) * cpt, $H, 0);
    cpt = cpt + 1;
}

*/


        // Duplication des points sur z
        label sz = points.size();
        points.setSize(2*sz);
        for (label i = 0; i < sz; i++)
        {
            const point& pt = points[i];
            points[i+sz] = point(pt.x(), pt.y(), -pt.z());
        }

        os  << points;

    #};
};

blocks
(
    // Injection
    hex (0 1 2 3 32 33 34 35) ($nbm_xi $nbm_yi 1) simpleGrading (1 1 1)

    // Block central
    hex (4 5 6 7 36 7 38 39) ($nbm_xi $nbm_yb 1) simpleGrading (1 1 1)
/*
    // Blocks gauche
    hex (8 9 10 11 40 41 42 43) ($nbm_x1 $nbm_y1 1) simpleGrading (1 1 1)
    hex (12 13 14 15 44 45 46 47) ($nbm_x2 $nbm_y2 1) simpleGrading (1 1 1)
    hex (16 17 18 19 48 49 50 51) ($nbm_x3 $nbm_y3 1) simpleGrading (1 1 1)

    // Blocks droit
    hex (20 21 22 23 52 53 54 55) ($nbm_x1 $nbm_y1 1) simpleGrading (1 1 1)
    hex (24 25 26 27 56 57 58 59) ($nbm_x2 $nbm_y2 1) simpleGrading (1 1 1)
    hex (28 29 30 31 60 61 62 63) ($nbm_x3 $nbm_y3 1) simpleGrading (1 1 1)
*/
);

edges
(
);

boundary
(
    up
    {
        type wall;
        faces
        (
            (3 35 34 2)
        );
    }
    bottom
    {
        type patch;
        faces
        (
            (8 40 41 9)
            (12 44 45 13)
            (16 48 49 17)
            (4 36 37 5)
            (20 52 53 21)
            (24 56 57 25)
            (28 60 61 29)
        );
    }
    right
    {
        type patch;
        faces
        (
            (30 62 61 29)
        );
    }
    left
    {
        type patch;
        faces
        (
            (11 43 40 8)
        );
    }
    fixedWalls
    {
        type wall;
        faces
        (
            (11 43 42 10)
            (15 47 46 14)
            (19 51 50 18)
            (3 53 32 0)
            (2 34 33 1)
            (23 55 54 22)
            (27 59 58 26)
            (31 63 62 30)
        );
    }
    frontAndBack
    {
        type empty;
        faces
        (
          // Front
            (0 1 2 3)
            (4 5 6 7)
            (8 9 10 11)
            (12 13 14 15)
            (16 17 18 19)
            (20 21 22 23)
            (24 25 26 27)
            (28 29 30 31)
          // Back
            (32 33 34 35)
            (36 37 38 39)
            (40 41 42 43)
            (44 45 46 47)
            (48 49 50 51)
            (52 53 54 55)
            (56 57 58 59)
            (60 61 62 63)
        );
    }
    Interface1M
    {
        type wall;
        faces
        (
            (0 32 33 1)
        );
    }
    Interface1S
    {
        type wall;
        faces
        (
            (7 39 38 6)
        );
    }
    Interface2M
    {
        type wall;
        faces
        (
            (7 39 36 4)
        );
    }
    Interface2S
    {
        type wall;
        faces
        (
            (18 50 49 17)
        );
    }
    Interface3M
    {
        type wall;
        faces
        (
            (19 51 48 16)
        );
    }
    Interface3S
    {
        type wall;
        faces
        (
            (14 46 45 13)
        );
    }
    Interface4M
    {
        type wall;
        faces
        (
            (15 47 44 12)
        );
    }
    Interface4S
    {
        type wall;
        faces
        (
            (10 42 41 9)
        );
    }
    Interface5M
    {
        type wall;
        faces
        (
            (6 38 37 5)
        );
    }
    Interface5S
    {
        type wall;
        faces
        (
            (23 55 52 20)
        );
    }
    Interface6M
    {
        type wall;
        faces
        (
            (22 54 53 21)
        );
    }
    Interface6S
    {
        type wall;
        faces
        (
            (27 59 56 24)
        );
    }
    Interface7M
    {
        type wall;
        faces
        (
            (26 58 57 25)
        );
    }
    Interface7S
    {
        type wall;
        faces
        (
            (31 63 60 28)
        );
    }
);

mergePatchPairs
(
    (Interface1M Interface1S)
    (Interface2M Interface2S)
    (Interface3M Interface3S)
    (Interface4M Interface4S)
    (Interface5M Interface5S)
    (Interface6M Interface6S)
    (Interface7M Interface7S)
);

// ************************************************************************* //
